<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://tailtq.github.io/</id><title>Tailtq</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2023-03-25T23:58:06+07:00</updated> <author> <name>Tai Le</name> <uri>https://tailtq.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://tailtq.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://tailtq.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> Â© 2023 Tai Le </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Asynchronous Programming</title><link href="https://tailtq.github.io/posts/asynchronous-programming/" rel="alternate" type="text/html" title="Asynchronous Programming" /><published>2023-03-19T00:00:00+07:00</published> <updated>2023-03-25T23:53:15+07:00</updated> <id>https://tailtq.github.io/posts/asynchronous-programming/</id> <content src="https://tailtq.github.io/posts/asynchronous-programming/" /> <author> <name>Tai Le</name> </author> <summary> It has been a long time since I wrote my last post. To be honest, I have been quite lazy since Tet holiday and lacked the motivation to complete personal tasks. Iâ€™m still in my own head a lot ðŸ˜‚. Fortunately, I have made up my mind to continue learning and sharing, and the topic today is Asynchronous Programming in Python. This topic became popular with the release of NodeJS and many language... </summary> </entry> <entry><title>Decorator - A pattern that is ubiquitously used in Python</title><link href="https://tailtq.github.io/posts/decorator-pattern/" rel="alternate" type="text/html" title="Decorator - A pattern that is ubiquitously used in Python" /><published>2022-12-05T00:00:00+07:00</published> <updated>2022-12-05T00:00:00+07:00</updated> <id>https://tailtq.github.io/posts/decorator-pattern/</id> <content src="https://tailtq.github.io/posts/decorator-pattern/" /> <author> <name>Tai Le</name> </author> <summary> Besides using the Bridge pattern, developers should also use Decorator to reduce the complexity of our code. Adapter, Bridge, and Decorator are from the same family but are used for different purposes. Adapter helps us convert an objectâ€™s interface to an appropriate form before using it in the intended methods. Bridge helps separate a big class into smaller ones. Decorator helps add new logic w... </summary> </entry> <entry><title>Modify Facebook's Duckling</title><link href="https://tailtq.github.io/posts/modify-facebook-duckling/" rel="alternate" type="text/html" title="Modify Facebook's Duckling" /><published>2022-11-04T00:00:00+07:00</published> <updated>2022-12-05T12:30:15+07:00</updated> <id>https://tailtq.github.io/posts/modify-facebook-duckling/</id> <content src="https://tailtq.github.io/posts/modify-facebook-duckling/" /> <author> <name>Tai Le</name> </author> <summary> It has been a long time since I wrote my last post, which is about the Bridge Pattern, I have been quite busy and my mind has been stuffed with many things lately so I hardly produce any posts, so sorryâ€¦ The idea of writing this new blog post popped into my mind spontaneously when I completed one task in my company: adding more patterns to the DateTime parser library. I believe it is a good id... </summary> </entry> <entry><title>Bridge - A pattern that every developer should know</title><link href="https://tailtq.github.io/posts/bridge-pattern/" rel="alternate" type="text/html" title="Bridge - A pattern that every developer should know" /><published>2022-09-14T00:00:00+07:00</published> <updated>2022-09-14T00:00:00+07:00</updated> <id>https://tailtq.github.io/posts/bridge-pattern/</id> <content src="https://tailtq.github.io/posts/bridge-pattern/" /> <author> <name>Tai Le</name> </author> <summary> In the environments where I have worked, I personally think my colleaguesâ€™ mindsets and approaches to coding arenâ€™t wise; they just follow their instinct without considering the refactoring factor. They always think code should not depend on any abstraction because abstraction is literally abstract (hard to understand and navigate in the editor). Those result in lengthy code (1-300 lines a func... </summary> </entry> <entry><title>How I reduced RASA testing time by 60-80%</title><link href="https://tailtq.github.io/posts/how-i-reduced-rasa-testing-time-by-60-80/" rel="alternate" type="text/html" title="How I reduced RASA testing time by 60-80%" /><published>2022-08-06T00:00:00+07:00</published> <updated>2022-11-06T14:45:42+07:00</updated> <id>https://tailtq.github.io/posts/how-i-reduced-rasa-testing-time-by-60-80/</id> <content src="https://tailtq.github.io/posts/how-i-reduced-rasa-testing-time-by-60-80/" /> <author> <name>Tai Le</name> </author> <summary> It is quite a long time since I wrote my latest post, and now I come back stronger with a topic that contains both Back-end and AI. It is my journey to customize the Natural Language Understanding (NLU) testing process of the RASA platform to reduce the computation time. In other words, I applied batch prediction in the testing phase, which is currently not available in the pipeline. This post ... </summary> </entry> </feed>
